internal void VerifyShareSkillHasBeenEntered(int row, ExtentTest test)
        {
            //Navigate to Manage Listings Page
            Global.GlobalDefinitions.driver.Navigate().GoToUrl("http://localhost:5000/Home/ListingManagement");
            Thread.Sleep(2000);

            //Assertions
            var listingTitle = GlobalDefinitions.driver.FindElement(By.XPath("//*[@id=\"listing-management-section\"]/div[2]/div[1]/div[1]/table/tbody/tr[1]/td[3]"));
            Assert.AreEqual(GlobalDefinitions.ExcelLib.ReadData(row, "Title"), listingTitle.Text);

            var listingDescription = GlobalDefinitions.driver.FindElement(By.XPath("//*[@id=\"listing-management-section\"]/div[2]/div[1]/div[1]/table/tbody/tr[1]/td[4]"));
            Assert.AreEqual(GlobalDefinitions.ExcelLib.ReadData(row, "Description"), listingDescription.Text);

            // logging to extent reports
            test.Log(LogStatus.Info, "Successfully created a new Share Skill listing");
        }

        internal void EditShareSkill(int rowNo, ExtentTest test)
        {
            //Populate the Excel Sheet
            GlobalDefinitions.ExcelLib.PopulateInCollection(Base.ExcelPath, "EditShareSkill");

            // Edit Share Skill Page
            string title = GlobalDefinitions.ExcelLib.ReadData(rowNo, "Title");
            Title.Clear(); Title.SendKeys(title);
            Thread.Sleep(1000);

            string description = GlobalDefinitions.ExcelLib.ReadData(rowNo, "Description");
            Description.Clear(); Description.SendKeys(description);
            Thread.Sleep(1000);

            CategoryDropDown.Click();
            string category = GlobalDefinitions.ExcelLib.ReadData(rowNo, "Category");
            SelectElement select = new SelectElement(GlobalDefinitions.driver.FindElement(By.XPath("//select[@name ='categoryId']")));
            select.SelectByText(category);
            Thread.Sleep(1000);

            SubCategoryDropDown.Click();
            string subcategory = GlobalDefinitions.ExcelLib.ReadData(rowNo, "SubCategory");
            SelectElement selectSubCategory = new SelectElement(GlobalDefinitions.driver.FindElement(By.XPath("//select[@name ='subcategoryId']")));
            selectSubCategory.SelectByText(subcategory);
            Thread.Sleep(1000);

            string tags = GlobalDefinitions.ExcelLib.ReadData(rowNo, "Tags");
            //Remove existing Tag
            GlobalDefinitions.driver.FindElement(By.XPath("//*[@id=\"service-listing-section\"]/div[2]/div/form/div[4]/div[2]/div/div/div/span/a")).Click();
            Tags.Click(); Tags.SendKeys(tags); Tags.SendKeys(Keys.Return);
            Thread.Sleep(1000);

            // Edit Service Type
            string serviceType = GlobalDefinitions.ExcelLib.ReadData(rowNo, "ServiceType");

            if (serviceType == "Hourly basis service")
            {
                GlobalDefinitions.driver.FindElement(By.XPath("//*[@id=\"service-listing-section\"]/div[2]/div/form/div[5]/div[2]/div[1]/div[1]/div/input")).Click();
            }
            else if (serviceType == "One-off service")
            {
                GlobalDefinitions.driver.FindElement(By.XPath("//*[@id=\"service-listing-section\"]/div[2]/div/form/div[5]/div[2]/div[1]/div[2]/div/input")).Click();
            }
            Thread.Sleep(1000);

            // Edit Location Type
            string locationType = GlobalDefinitions.ExcelLib.ReadData(rowNo, "LocationType");

            if (locationType == "Online")
            {
                GlobalDefinitions.driver.FindElement(By.XPath("//*[@id=\"service-listing-section\"]/div[2]/div/form/div[6]/div[2]/div/div[2]/div/input")).Click();
            }
            else if (locationType == "On-site")
            {
                GlobalDefinitions.driver.FindElement(By.XPath("//*[@id=\"service-listing-section\"]/div[2]/div/form/div[6]/div[2]/div/div[1]/div/input")).Click();
            }
            Thread.Sleep(1000);

            string startDate = GlobalDefinitions.ExcelLib.ReadData(rowNo, "Startdate");
            StartDateDropDown.Click();
            StartDateDropDown.SendKeys(startDate);
            Thread.Sleep(1000);

            string endDate = GlobalDefinitions.ExcelLib.ReadData(rowNo, "Enddate");
            EndDateDropDown.Click();
            EndDateDropDown.SendKeys(endDate);
            Thread.Sleep(1000);

            string day = GlobalDefinitions.ExcelLib.ReadData(rowNo, "Selectday");
            string startTime = GlobalDefinitions.ExcelLib.ReadData(rowNo, "Starttime");
            string endTime = GlobalDefinitions.ExcelLib.ReadData(rowNo, "Endtime");

            if (day == "Mon")
            {
                // I need to get Monday Checkbox XPath
                GlobalDefinitions.driver.FindElement(By.XPath("//*[@id=\"service-listing-section\"]/div[2]/div/form/div[7]/div[2]/div/div[3]/div[1]/div/input")).Click();

                // I need to get Monday Start Time XPath
                IWebElement mondayStartTime = GlobalDefinitions.driver.FindElement(By.XPath("//*[@id=\"service-listing-section\"]/div[2]/div/form/div[7]/div[2]/div/div[3]/div[2]/input"));
                mondayStartTime.Click(); mondayStartTime.SendKeys(startTime);

                // I need to get Monday End Time XPath.
                IWebElement mondayEndTime = GlobalDefinitions.driver.FindElement(By.XPath("//*[@id=\"service-listing-section\"]/div[2]/div/form/div[7]/div[2]/div/div[3]/div[3]/input"));
                mondayEndTime.Click(); mondayEndTime.SendKeys(endTime);
            }
            else if (day == "Tue")
            {
                // I need to get Tuesday Checkbox XPath
                GlobalDefinitions.wait(3);
                GlobalDefinitions.driver.FindElement(By.XPath("//*[@id=\"service-listing-section\"]/div[2]/div/form/div[7]/div[2]/div/div[4]/div[1]/div/input")).Click();
                                                                 
                // I need to get Tuesday Start Time XPath
                IWebElement tueStartTime = GlobalDefinitions.driver.FindElement(By.XPath("//*[@id=\"service-listing-section\"]/div[2]/div/form/div[7]/div[2]/div/div[4]/div[2]/input"));
                tueStartTime.Click();
                GlobalDefinitions.WaitForElement(Global.GlobalDefinitions.driver, By.XPath("//*[@id=\"service-listing-section\"]/div[2]/div/form/div[7]/div[2]/div/div[4]/div[2]/input"), 5);
                tueStartTime.SendKeys(startTime);

                // I need to get Tuesday End Time XPath.
                IWebElement tueEndTime = GlobalDefinitions.driver.FindElement(By.XPath("//*[@id=\"service-listing-section\"]/div[2]/div/form/div[7]/div[2]/div/div[4]/div[3]/input"));
                tueEndTime.Click(); tueEndTime.SendKeys(endTime);
            }
            Thread.Sleep(1000);

            // Select Skill Trade option

            string skillTrade = GlobalDefinitions.ExcelLib.ReadData(rowNo, "SkillTrade");

            if (skillTrade == "Skill-Exchange")
            {
                // I click on Skill-exchange option
                GlobalDefinitions.driver.FindElement(By.XPath("//*[@id=\"service-listing-section\"]/div[2]/div/form/div[8]/div[2]/div/div[1]/div/input")).Click();
                // Add Skill-Exchange
                string skillExchange = GlobalDefinitions.ExcelLib.ReadData(rowNo, "Skill-Exchange");
                SkillExchange.Click(); SkillExchange.SendKeys(skillExchange); SkillExchange.SendKeys(Keys.Return);
            }
            else if (skillTrade == "Credit")
            {
                // I click on the Credit option
                GlobalDefinitions.driver.FindElement(By.XPath("//*[@id=\"service-listing-section\"]/div[2]/div/form/div[8]/div[2]/div/div[2]/div/input")).Click();
                string credit = GlobalDefinitions.ExcelLib.ReadData(rowNo, "Credit");
                CreditAmount.Click(); CreditAmount.SendKeys(credit);
            }
            Thread.Sleep(1000);

            //// Upload Work Samples - Cannot upload when editing and saving, shows error message "There is an error when updating Work Samples - undefined"
            //IWebElement workSample = GlobalDefinitions.driver.FindElement(By.XPath("//*[@id=\"service-listing-section\"]/div[2]/div/form/div[9]/div/div[2]/section/div/label/div/span/i"));
            //workSample.Click();

            //Thread.Sleep(2000);

            //AutoItX.WinActivate("Open"); // Window name to select a file 
            //AutoItX.Send(@"C:\Users\saara\Downloads\Team photo_April 19, 2023.png");  
            //AutoItX.Send("{Enter}");
            //Thread.Sleep(2000);


            // Select Active option
            string active = GlobalDefinitions.ExcelLib.ReadData(rowNo, "Active");

            if (active == "Online")
            {
                GlobalDefinitions.driver.FindElement(By.XPath("//*[@id=\"service-listing-section\"]/div[2]/div/form/div[10]/div[2]/div/div[1]/div/input")).Click();
            }
            else if (active == "Hidden")
            {
                GlobalDefinitions.driver.FindElement(By.XPath("//*[@id=\"service-listing-section\"]/div[2]/div/form/div[10]/div[2]/div/div[1]/div/input")).Click();
            }
            // Click on Save
            Save.Click();
            Thread.Sleep(1000);

            //Assert that the listing was edited successfully with valid details 
            var listingTitle = GlobalDefinitions.driver.FindElement(By.XPath("//*[@id=\"listing-management-section\"]/div[2]/div[1]/div[1]/table/tbody/tr[1]/td[3]"));
            Assert.AreEqual(GlobalDefinitions.ExcelLib.ReadData(rowNo, "Title"), listingTitle.Text);

            var listingDescription = GlobalDefinitions.driver.FindElement(By.XPath("//*[@id=\"listing-management-section\"]/div[2]/div[1]/div[1]/table/tbody/tr[1]/td[4]"));
            Assert.AreEqual(GlobalDefinitions.ExcelLib.ReadData(rowNo, "Description"), listingDescription.Text);

            // logging to extent reports
            test.Log(LogStatus.Info, "Successfully Edited an existing Share Skill listing");
        }

        internal void VerifyFieldErrorMessages(int row, ExtentTest test)
        {
            Thread.Sleep(1000);

            //Verify PopUp Error Message
            Assert.AreEqual("Please complete the form correctly.", PopUpMessage.Text);

            //Verify Title is required
            string title = GlobalDefinitions.ExcelLib.ReadData(row, "Title");
            if (title == "")
            {
                Assert.AreEqual("Title is required", TitleErrorMessage.Text);
            }

            //Verify Description is required
            string description = GlobalDefinitions.ExcelLib.ReadData(row, "Description");
            if (description == "")
            {
                Assert.AreEqual("Description is required", DescriptionErrorMessage.Text);
            }

            //Verify Category is required
            string category = GlobalDefinitions.ExcelLib.ReadData(row, "Category");
            if (category == "")
            {
                Assert.AreEqual("Category is required", CategoryErrorMessage.Text);
            }
            else
            {
                string subCategory = GlobalDefinitions.ExcelLib.ReadData(row, "Subcategory");
                if (subCategory == "")
                {
                    Assert.AreEqual("Subcategory is required", SubCategoryErrorMessage.Text);
                }
            }

            //Verify Tags are required
            string tags = GlobalDefinitions.ExcelLib.ReadData(row, "Tags");
            if (tags == "")
            {
                Assert.AreEqual("Tags are required", TagsErrorMessage.Text);
            }

            //Verify Skill-Exchange Tags is required
            string skillExchange = GlobalDefinitions.ExcelLib.ReadData(row, "Skill-Exchange");
            if (skillExchange == "")
            {
                Assert.AreEqual("Tag is required", SkillExchangeErrorMessage.Text);
            }
            // logging to extent reports
            test.Log(LogStatus.Info, "Successfully Verified field error messages");
        }
        internal void VerifyCharacterLengthOfTitle(int row, ExtentTest test)
        {
            //Populate the Excel Sheet
            GlobalDefinitions.ExcelLib.PopulateInCollection(Base.ExcelPath, "ShareSkill");
            Title.Clear();
            // Input Title
            string title = GlobalDefinitions.ExcelLib.ReadData(row, "Title");
            Title.SendKeys(title);

            string typedTitle = Title.GetAttribute("value");

            //Assert the length of the Title is a 100 characters
            Assert.LessOrEqual(typedTitle.Length, 100);

            // logging to extent reports
            test.Log(LogStatus.Info, "Successfully Verified character length of Title");
        }
        internal void VerifyUserCannotInputTitleWithInvalidCharacters(string title, string expectedErrorMessage, ExtentTest test)
        {
            wait(3);
            Title.Clear();
            Title.SendKeys(title);
            Assert.That(TitleErrorMessage.Text == expectedErrorMessage);

            // logging to extent reports
            test.Log(LogStatus.Info, "Successfully Verified User cannot input Title with Invalid characters");
        }
        internal void VerifyUserCannotInputDescriptionWithInvalidCharacters(string description, string expectedErrorMessage, ExtentTest test)
        {
            wait(3);
            Description.Clear();
            Description.SendKeys(description);
            Assert.That(DescriptionErrorMessage.Text == expectedErrorMessage);

            // logging to extent reports
            test.Log(LogStatus.Info, "Successfully Verified User cannot input Descripton with Invalid characters");
        }
        internal void VerifyCharacterLengthOfDescription(int row, ExtentTest test)
        {
            //Populate the Excel Sheet
            GlobalDefinitions.ExcelLib.PopulateInCollection(Base.ExcelPath, "ShareSkill");
            Description.Clear();
            // Input Description
            string description = GlobalDefinitions.ExcelLib.ReadData(row, "Description");
            Description.SendKeys(description);

            string typedDescription = Description.GetAttribute("value");

            //Assert the length of the Description is 600 characters
            Assert.LessOrEqual(typedDescription.Length, 600);

            // logging to extent reports
            test.Log(LogStatus.Info, "Successfully Verified character length of Description");
        }
    }
}
